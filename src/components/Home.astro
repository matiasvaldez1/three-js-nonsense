<div id="smoke-bkg" class="smoke"></div>

<script>
  import * as THREE from "three";
  import { materialAlphaTest } from "three/examples/jsm/nodes/Nodes.js";

  const reducedMotion = window.matchMedia("(prefers-reduced-motion: reduce)");

  if (!reducedMotion.matches) {
    const $bkg = document.getElementById("smoke-bkg");

    let w = window.innerWidth;
    let h = window.screen.height + 200;

    // inicializar Three.js
    // 3 cosas básicas: escena, cámara, renderizador

    // escena 🖼️
    const scene = new THREE.Scene();

    // camara 📹
    // 75 -> ángulo de visión
    const camera = new THREE.PerspectiveCamera(75, w / h, 1, 5000);
    camera.position.z = 500;
    scene.add(camera);

    // ▶️ renderizador
    const renderer = new THREE.WebGLRenderer({
      antialias: false,
      alpha: true,
      powerPreference: "high-performance",
      precision: "lowp",
    });
    renderer.setSize(w, h);
    // color de fondo
    scene.background = new THREE.Color("#FFFFFF");

    $bkg?.appendChild(renderer.domElement);

    const villagerTexture = new THREE.TextureLoader().load("/villager.jpg");

    // 1. geometria
    const cubeFaceGeo = new THREE.BoxGeometry(500, 500);

    // 2. material
    const cubeFaceMaterial = new THREE.MeshLambertMaterial({
      map: villagerTexture,
      transparent: false,
      opacity: 1,
    });

    //light

    const light = new THREE.DirectionalLight(0xffffff, 0.3);

    light.position.set(0, 0, 1);

    scene.add(light);

    //mesh

    const villager = new THREE.Mesh(cubeFaceGeo, cubeFaceMaterial);
    const defaultColor = cubeFaceMaterial.color.clone();
    villager.position.set(0, 0, -5000);
    scene.add(villager);

    renderer.domElement.addEventListener("click", shootProjectile);

    function shootProjectile(event) {
      console.log("clicked");
      const projectileGeometry = new THREE.CylinderGeometry(4, 4, 40, 20);
      const projectileMaterial = new THREE.MeshBasicMaterial({
        color: "red",
      });
      const projectile = new THREE.Mesh(projectileGeometry, projectileMaterial);

      projectile.rotateX(0);
      projectile.rotateY(20);
      projectile.rotateZ(0);
      projectile.position.y = -20;

      console.log(projectile.rotation);

      scene.add(projectile);


      function animateProjectile() {
        const projectileBox = new THREE.Box3().setFromObject(projectile);
        const cubeBox = new THREE.Box3().setFromObject(villager);

        const projectilePosition = projectile.position;
        const cubePosition = villager.position;

        // Calculate the direction vector for the projectile
        const direction = new THREE.Vector3(
          cubePosition.x - projectilePosition.x,
          cubePosition.y - projectilePosition.y,
          cubePosition.z - projectilePosition.z
        ).normalize();

        projectile.position.copy(projectilePosition);
        const speed = 0.5;
        const delta = 0.1;
        const movement = direction.clone().multiplyScalar(delta / speed);
        const maxDistance = cubePosition.distanceTo(projectilePosition);
        let distanceTraveled = 0;

        const moveProjectile = () => {
          projectile.position.add(movement);
          distanceTraveled += movement.length();

          if (
            projectileBox.intersectsBox(cubeBox) &&
            scene.children.includes(projectile)
          ) {
            console.log("COLLISION");
            scene.remove(projectile);
            console.log(cubeFaceMaterial.color);
            cubeFaceMaterial.color.set("red");
            cubeFaceMaterial.needsUpdate = true;
            setTimeout(() => {
              console.log("OUT");
              cubeFaceMaterial.color.set(defaultColor);
              cubeFaceMaterial.needsUpdate = true;
            }, 500);
          }

          if (distanceTraveled >= maxDistance) {
            scene.remove(projectile);
            return;
          }

          requestAnimationFrame(moveProjectile);
        };

        moveProjectile();
        requestAnimationFrame(animateProjectile);
      }

      animateProjectile();
      requestAnimationFrame(animateProjectile);
    }

    function resize() {
      h = window.screen.height + 200;
      w = window.innerWidth;
      camera.aspect = w / h;
      camera.updateProjectionMatrix();
      renderer.setSize(w, h);
    }

    function animate() {
      villager.position.set(0, 0, villager.position.z + 10);
      renderer.render(scene, camera);
      requestAnimationFrame(animate);
    }

    animate();

    window.addEventListener("resize", resize);
  }
</script>

<style>
  .smoke {
    position: fixed;
    top: 0;
    z-index: -10;
    width: 100%;
    opacity: 1;
  }
</style>
